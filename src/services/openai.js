// src/services/openai.js
// Service for interacting with OpenAI API

import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true // Note: In production, you should use a backend proxy
});

/**
 * Generates an explanation for a given topic using AI
 * @param {string} query - The question to be explained
 * @param {string} level - The educational level (elementary, middle, high, college)
 * @returns {Promise<string>} - The generated explanation
 */
export const generateExplanation = async (query, level = 'middle') => {
  try {
    const prompt = `Please provide a comprehensive explanation about "${query}" tailored for ${level} school level. 
    Include the following sections:
    1. A clear definition and overview
    2. Key concepts and principles
    3. How it works or is applied
    4. Examples and practical applications
    5. Additional resources for further learning
    
    Format the response in Markdown with appropriate headings and bullet points.`;

    const completion = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: "You are an expert educational content creator who specializes in creating clear, engaging, and age-appropriate explanations."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      model: "gpt-3.5-turbo",
      temperature: 0.7,
      max_tokens: 1000
    });

    return completion.choices[0].message.content;
  } catch (error) {
    console.error('Error generating explanation:', error);
    throw new Error('Failed to generate explanation. Please try again.');
  }
};

/**
 * Summarizes a given text using OpenAI API
 * @param {string} text - The text to summarize
 * @returns {Promise<string>} - The generated summary
 */
export const generateSummary = async (text) => {
  // In a real implementation, this would make an API call to OpenAI
  console.log(`Generating summary for text of length: ${text.length}`);
  
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Demo implementation with a simplified response
  return `This is a summary of the provided text. In a production environment, this would be generated by OpenAI's API to provide a concise overview of the key points contained in the original text.`;
};

/**
 * Identifies key concepts in a block of text
 * @param {string} text - The text to analyze
 * @returns {Promise<Array<string>>} - A list of key concepts
 */
export const extractConcepts = async (text) => {
  // In a real implementation, this would make an API call to OpenAI
  console.log(`Extracting concepts from text of length: ${text.length}`);
  
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 800));
  
  // Demo implementation with placeholder concepts
  return [
    'Key Concept 1',
    'Important Term A',
    'Foundational Theory',
    'Practical Application'
  ];
};

/**
 * Generates study notes for a given topic
 * @param {string} topic - The topic to generate notes for
 * @param {string} level - The educational level
 * @returns {Promise<string>} - The generated study notes
 */
export const generateStudyNotes = async (topic, level = 'middle') => {
  // In a real implementation, this would make an API call to OpenAI
  console.log(`Generating study notes for: "${topic}" at ${level} level`);
  
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1200));
  
  // Return a simple formatted response
  return `
# Study Notes: ${topic}

## Key Points
- Main idea 1
- Main idea 2
- Main idea 3

## Important Definitions
- Term A: Definition
- Term B: Definition

## Examples
1. Example situation
2. Example problem

## Review Questions
1. Question about the topic?
2. How would you apply this concept?

These study notes are tailored for ${level} level students.
  `;
};

/**
 * Checks if the system is using demo mode vs actual API
 * @returns {boolean} - True if using demo mode
 */
export const isUsingDemoMode = () => true;

export const sendMessage = async (message) => {
  try {
    const completion = await openai.chat.completions.create({
      messages: [{ role: "user", content: message }],
      model: "gpt-3.5-turbo",
    });

    return completion.choices[0].message.content;
  } catch (error) {
    console.error('Error sending message to OpenAI:', error);
    throw error;
  }
};